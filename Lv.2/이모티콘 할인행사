using System;

public class Solution {
    
    public int[] answer;
    public int[,] emoticonMatrix;
    public bool[] visited;
    
    public int[] solution(int[,] users, int[] emoticons) {
        answer = new int [2];

        // <가격, 할인율>
        emoticonMatrix = new int[emoticons.Length, 2];
        visited = new bool[emoticons.Length];
        
        for(int i = 0; i < emoticonMatrix.GetLength(0); i++){
            emoticonMatrix[i, 0] = emoticons[i];
        }
        
        DFS(users, 0);
        
        return answer;
    }
    
    public void DFS(int[,] users, int depth){

        //모든 정점에 할인율을 정한 경우
        if(depth == emoticonMatrix.GetLength(0)){

            //현재 경우의 이모티콘 가입자 수와 판매액
            int[] virtualResult = new int[2];
            
            for(int i = 0; i < users.GetLength(0); i++){
                int userWallet = 0;
                
                //각 사용자에 대해 이모티콘 판매액 계산
                for(int j = 0; j < emoticonMatrix.GetLength(0); j++){
                    if(users[i, 0] <= emoticonMatrix[j, 1]){
                        userWallet += emoticonMatrix[j, 0] * (100 - emoticonMatrix[j, 1]) / 100;
                    }
                    
                }

                //사용자가 이모티콘 구매 시 일정 한도를 넘으면 플러스 서비스 가입
                //그 외에는 모두 구매
                if(userWallet >= users[i, 1]){
                    virtualResult[0]++;
                } else {
                    virtualResult[1] += userWallet;
                }
            }
            
            //1. 서비스 가입 수가 현재까지 알려진 최대 가입 수보다 많으면 해당 값을 저장
            if(answer[0] < virtualResult[0]){
                answer[0] = virtualResult[0];
                answer[1] = virtualResult[1];
            } else if(answer[0] == virtualResult[0]){

                //2. 가입 수가 같다면 판매액을 기준으로 값을 저장
                if(answer[1] < virtualResult[1]){
                    answer[1] = virtualResult[1];
                }
            }
        } else {
        
            //마지막 정점까지 각 정점에 10~40% 할인율을 적용
            for(int i = 0; i < 4; i++){
                emoticonMatrix[depth, 1] = (i+1) * 10;
                if(!visited[depth]){
                    visited[depth] = true;
                    DFS(users, depth+1);
                    visited[depth] = false;
                }
            }
        }
    }
}
