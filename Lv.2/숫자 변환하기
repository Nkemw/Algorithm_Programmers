using System;
using System.Collections.Generic;
public class Solution {
    int answer = 0;
    public int solution(int x, int y, int n) {
        
        Bfs(x, y, n);
        return answer;
    }
    
    void Bfs(int x, int y, int n){

        //<값, 연산 횟수>
        Queue<int[,]> queue = new Queue<int[,]>();

        //큐에 저장된 숫자를 관리
        HashSet<int> uniqueSet = new HashSet<int>();
        queue.Enqueue(new int[,] {{x, 0}});
        
        //시작 숫자와 목표 숫자가 같은 경우
        if(x == y){
            return;
        }
        
        while(queue.Count > 0){
            //현재 숫자 정보
            int[,] currentInfo = queue.Dequeue();
            
            for(int i = 0; i < 3; i++){
                
                //숫자만을 추출하여 숫자 변환
                int expectValue = currentInfo[0, 0];
                
                switch(i){
                    case 0:
                        expectValue += n;
                        break;
                    case 1:
                        expectValue *= 2;
                        break;
                    case 2:
                        expectValue *= 3;
                        break;
                }
 
                //변환된 숫자가 목표 숫자보다 작고, 큐에 저장된 숫자가 아니라면 큐에 숫자 추가
                //변환된 숫자가 y이면 연산횟수 + 1을 출력하고 함수 종료
                if(expectValue < y && !uniqueSet.Contains(expectValue)){
                    uniqueSet.Add(expectValue);
                    queue.Enqueue(new int[,] {{expectValue, currentInfo[0, 1] + 1}});
                } else if(expectValue == y){
                    answer = currentInfo[0, 1]+1;
                    return;
                }
            }
            
            
        }
        
        //위의 반복문을 진행했을 때 목표 숫자에 도달하지 못했다면 -1 출력
        if(answer == 0){
            answer = -1;
        }
    }
}
