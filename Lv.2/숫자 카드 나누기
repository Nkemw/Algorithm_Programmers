using System;

public class Solution {
    public int solution(int[] arrayA, int[] arrayB) {
        int answer = 0;
        
        //배열 A 최대공약수를 구하기 위해 초기화
        int gcdValue = arrayA[0];
        
        //배열 A 최대공약수 저장
        for(int i = 1; i < arrayA.Length; i++){
            gcdValue = Gcd(arrayA[i], gcdValue);
        }
        
        //배열 A 최대공약수가 배열 B의 모든 원소들을 나누지 않는지 확인하여 최댓값 저장
        if(DivideCheck(gcdValue, arrayB) && answer < gcdValue){
            answer = gcdValue;
        }
        
        //위와 같이 배열 B에 대하여 실행
        gcdValue = arrayB[0];
        
        for(int i = 1; i < arrayB.Length; i++){
            gcdValue = Gcd(arrayB[i], gcdValue);
        }
        
        if(DivideCheck(gcdValue, arrayA) && answer < gcdValue){
            answer = gcdValue;
        }
        
        
        
        return answer;
    }
    
    //유클리드 호제법 (a > b)
    //나머지 연산을 실행했을 때 나머지가 없다면 a를 반환
    int Gcd(int a, int b)
    {
        if(b == 0){
            return a;
        } else {
            return Gcd(b, a%b);
        }
    }
    
    //최대공약수를 이용하여 배열이 나눠지는 지
    bool DivideCheck(int gcdValue, int[] arrTarget){
        for(int i = 0; i < arrTarget.Length; i++){
            if(arrTarget[i] % gcdValue == 0){
                return false;
            }
        }
        return true;
    }
}
