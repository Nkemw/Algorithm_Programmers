using System;
using System.Text;
public class Solution {
    public long[] solution(long[] numbers) {
        long[] answer = new long[numbers.Length];
        for(int i = 0; i < numbers.Length; i++){
            answer[i] = GetNextBinaryNum(numbers[i]);
        }
        return answer;
    }
    
    long GetNextBinaryNum(long num){
        
        //현재 정수 비트
        string currentBinaryNum = GetBinaryNum(num);

        //1의 개수
        int oneCount = 0;

        for(int i = 0; i < currentBinaryNum.Length; i++){
            //비트 1 개수 측정
            if(currentBinaryNum[i] == '1'){
                oneCount++;
            }
        }
        
        //1의 개수가 2개 이상인 경우    
        if(oneCount > 1){

            //모든 비트가 1인 경우
            if(currentBinaryNum.Length == oneCount){
                //가장 높은 비트를 0으로 변경 후 가장 높은 비트보다 1단계 높은 비트를 1로 변경
                return num + (long)Math.Pow(2, lastOneIndex+1) - (long) Math.Pow(2, lastOneIndex);
            } else {
                for(int i = 0; i < currentBinaryNum.Length; i++){
                    
                    //0이 2의 자연수 제곱 자리에 있는 경우
                    if(currentBinaryNum[i] == '0' && i != 0){
                        //0의 이전 비트를 0으로 변경하고 0의 비트를 1로 변경
                        return num + (long)Math.Pow(2, i) - (long) Math.Pow(2, i-1);
                    }

                    //0이 2의 0제곱 자리에 있는 경우
                    //1 증가시킨 값을 반환
                    if(currentBinaryNum[i] == '0' && i == 0){                            
                        return num + 1;
                    }
                }
            }
        } else {
            return num + 1;
        }
        
        return 0;
    }
    
    //정수를 비트로 변경하여 문자열로 반환
    string GetBinaryNum(long num){
        string BinaryNum = "";
        StringBuilder sb = new StringBuilder();
        
        while(num > 0){
            if(num % 2 == 0){
                sb.Append('0');
            } else {
                sb.Append('1');
            }
            num /= 2;
        }
        return sb.ToString();
    }
}
