using System;
using System.Collections.Generic;
using System.Text;
public class Solution {
    public int solution(int n, int k) {
        int answer = 0;
        
        //1. 십진수를 k진수로 변환하여 Stack에 저장
        Stack<int> convertNum = new Stack<int>();
        
        while(true){
            if(n/k > 0){
                convertNum.Push(n % k);
                n /= k;
            } else {
                convertNum.Push(n);
                break;
            }
        }
        
        //2. Stack에 변환된 k진수를 문자열로 저장
        StringBuilder sb = new StringBuilder();
        
        int stackCount = convertNum.Count;
        for(int i = 0; i < stackCount; i++){
            sb.Append(convertNum.Pop());
        }
        
        string numStr = sb.ToString();
        sb.Clear();
        
        //3. 0을 기준으로 정수 추출
        for(int i = 0; i < numStr.Length; i++){

            //0이 아닌 문자라면 StringBuilder 추가
            if(numStr[i] != '0'){
                sb.Append(numStr[i]);
            }
            
            //0을 만나거나 마지막 문자일 경우 sb의 크기에 따라 정수를 추출하여 소수 판별
            if(numStr[i] == '0' && sb.Length > 0){
                if(isPrime(sb.ToString())){
                    answer++;   
                }
                sb.Clear();
            } else if(i == numStr.Length-1 && sb.Length > 0){
                if(isPrime(sb.ToString())){
                    answer++;   
                }
                sb.Clear();
            }
        }
        return answer;
    }
    
    private bool isPrime(string number){
        long num = long.Parse(number);
        for(long i = 2; i*i <= num; i++){
            if(num % i == 0){
                return false;
            }
        }
        if(num < 2){
            return false;
        }
        return true;
    }
}
