using System;
using System.Collections.Generic;

public class Solution {
    
    //이분 탐색 시 중복 수를 더하기 위해 전역 변수로 선언
    long answer = 0;
    public long solution(int[] weights) {
      
        //이분 탐색을 위해 배열 정렬
        Array.Sort(weights);
        
    
        //입력 배열의 모든 원소에 대해 반복문 실행
        for(int i = 0; i < weights.Length; i++){

            //1:1 순서쌍 개수 세기
            for(int j = i+1; j < weights.Length; j++){
                if(weights[i] == weights[j]){
                    answer++;
                } else {
                    break;
                }
            }

            //2:4 순서쌍 개수 세기
            if(BinarySearch(weights, weights[i] * 2)){
                answer++;
            }
            
            //2:3 순서쌍 개수 세기
            if(weights[i] % 3 == 0 && BinarySearch(weights, weights[i] * 2 / 3)){
                answer++;
            }

            //4:3 순서쌍 개수 세기
            if(weights[i] % 3 == 0 && BinarySearch(weights, weights[i] * 4 / 3)){
                answer++;
            }
            
            
        }
        
        return answer;
    }
    
    bool BinarySearch(int[] arr, int target){
        int min = 0;
        int max = arr.Length-1;
        
        while(min <= max){
            int mid = (min+max)/2;

            //배열을 참조했을 때 원하는 숫자의 크기와 비교
            if(arr[mid] < target){
                min = mid + 1;
                
            } else {
                max = mid - 1;
            }
        }

        //탐색 이후 배열의 범위를 벗어나는 경우 예외 처리
        if(min >= arr.Length || min <= -1){
            return false;
        }
        
        //원하는 숫자를 찾았다면 중복 개수만큼 순서쌍 추가
        if(arr[min] == target){
            for(int i = min+1; i < arr.Length; i++){
                if(arr[min] == arr[i]){
                    answer++;
                } else {
                    break;
                }
            }
        }
        
        //이후 원하는 숫자를 찾았는지 true/false 반환
        return arr[min] == target;

    }
}
