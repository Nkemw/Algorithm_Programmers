using System;
using System.Collections.Generic;

public class Solution {
    
    int[] answer;
    public int[] solution(int rows, int columns, int[,] queries) {
        answer = new int[queries.GetLength(0)];

        //입력 행, 열 크기의 2차원 배열 생성
        int[,] numTable = new int[rows, columns];
        
        //2차원 배열의 초기값 저장
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < columns; j++){
                numTable[i, j] = i*columns + j+1;
            }
        }
        
        //순차적으로 쿼리 연산 처리
        for(int i = 0; i < queries.GetLength(0); i++){
            int[] querie = new int[4];
            for(int j = 0; j < 4; j++){
                querie[j] = queries[i, j];
            }
            GetQuerieResult(querie, numTable, i);
        }
        return answer;
    }
    
    void GetQuerieResult(int[] querie, int[,] table, int index){

        //행렬 회전 연산에서 얻은 최솟값 저장
        answer[index] = TableRotate(querie, table, edgeValues);
    }
    
    int TableRotate(int[] querie, int[,] table, List<int> edgeValues){
        //초기값 하나를 저장하고 최솟값으로 저장
        int temp = table[querie[0]-1, querie[3]-1];
        int min = temp;
        
        //위쪽 가장자리 행을 시계방향으로 당긴다
        for(int col = querie[3]-1; col > querie[1]-1; col--){
            table[querie[0]-1, col] = table[querie[0]-1, col-1];

            //당길 때마다 최솟값 검사
            if(table[querie[0]-1, col] < min){
                min = table[querie[0]-1, col];
            }
        }
        
        //좌측 가장자리 열을 시계방향으로 당긴다
        for(int row = querie[0]-1; row < querie[2]-1; row++){
            table[row, querie[1]-1] = table[row+1, querie[1]-1];
            if(table[row, querie[1]-1] < min){
                min = table[row, querie[1]-1];
            }
        }
        
        //아래쪽 가장자리 행을 시계방향으로 당긴다
        for(int col = querie[1]-1; col < querie[3]-1; col++){
            table[querie[2]-1, col] = table[querie[2]-1, col+1];
            if(table[querie[2]-1, col] < min){
                min = table[querie[2]-1, col];
            }
        }
        
        //우측 가장자리 열을 시계방향으로 당긴다
        for(int row = querie[2]-1; row > querie[0]; row--){
            table[row, querie[3]-1] = table[row-1, querie[3]-1];
            if(table[row, querie[3]-1] < min){
                min = table[row, querie[3]-1];
            }
        }
        
        //마지막 원소를 초기값으로 저장
        table[querie[0], querie[3]-1] = temp;
        
        //최솟값 반환
        return min;
    }
}
