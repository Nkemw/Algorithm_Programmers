using System;
public class Solution {
    public long solution(int r1, int r2) {
        long answer = 0;
        
        //y축의 정수 좌표 개수 더하기
        answer += r2-r1+1;

        //r2와 r1의 제곱값
        long r1Square = (long) r1*r1;
        long r2Square = (long) r2*r2;
        
        for(int i = 1; i < r2; i++){

            //i의 제곱값
            long iSquare = (long) i*i;

            //i가 r1 이상인 경우 x축까지 침범하므로 구역을 나눠서 개수를 구한다
            if(i < r1){
                answer += (long) Math.Ceiling(Math.Sqrt(r2Square - iSquare)) - (long) Math.Ceiling(Math.Sqrt(r1Square - iSquare));
            } else {
                answer += (long) Math.Ceiling(Math.Sqrt(r2Square - iSquare));
                answer--;
            }
            
            //y좌표가 유리수가 아니라 정수로 나오는 경우 위에서는 해당 좌표를 무시하므로 개수를 더해준다
            if((long) Math.Sqrt(r2Square - iSquare) == (long) Math.Ceiling(Math.Sqrt(r2Square - iSquare))){
                answer++;
            }
        }

        //1사분면 정수 좌표 개수의 4배 반환
        return answer * 4;
    }
}
