using System;
using System.Collections.Generic;

class Solution {
    
    //현 위치에서 움직일 수 있는 방법
    int[,] move = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    
    public int solution(int[,] maps) {
        int answer;
        
        Bfs(maps, 0, 0);
        
        //도착지를 탐색하지 못한 경우와 탐색한 경우를 나누어 결과 출력
        if(maps[maps.GetLength(0)-1, maps.GetLength(1)-1] == 1){
            answer = -1;
        } else {
            answer = maps[maps.GetLength(0)-1, maps.GetLength(1)-1];
        }
        return answer;
    }
    
    void Bfs(int[,] maps, int row, int col){
        
        Queue<int[,]> queue = new Queue<int[,]>();
        
        //초기값으로 현재 위치(0, 0) 저장
        queue.Enqueue(new int[,] {{row, col}});
    
        //탐색할 정점이 없을 때까지 반복
        while(queue.Count != 0){
            //현 위치
            int[,] curPos = queue.Dequeue();
            
            //상하좌우 4번 반복
            for(int i = 0; i < 4; i++){

                //맵의 범위를 벗어나면 탐색 제외
                if(curPos[0, 0] + move[i, 0] >= maps.GetLength(0) || curPos[0, 0] + move[i, 0] < 0
                  || curPos[0, 1] + move[i, 1] >= maps.GetLength(1) || curPos[0, 1] + move[i, 1] < 0){
                    continue;
                }
                
                //탐색 대상이 벽이라면 탐색 제외
                if(maps[curPos[0, 0] + move[i, 0], curPos[0, 1] + move[i, 1]] == 0){
                    continue;
                }
                
                //탐색 가능한 정점인 경우
                if(maps[curPos[0, 0] + move[i, 0], curPos[0, 1] + move[i, 1]] == 1){
                    
                    //다음 정점에 다음 정점까지의 걸어온 거리를 저장, 및 다음 위치를 큐에 저장
                    //걸어온 길을 돌아가지 않음
                    maps[curPos[0, 0] + move[i, 0], curPos[0, 1] + move[i, 1]] = maps[curPos[0, 0], curPos[0, 1]] + 1;
                    queue.Enqueue(new int[,] {{curPos[0, 0] + move[i, 0], curPos[0, 1] + move[i, 1]}});
                }
            }
        }
    }
}
