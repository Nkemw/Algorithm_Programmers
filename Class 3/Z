using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Runtime.InteropServices;
using System.Text;

class Program
{
    //원하는 행, 열 좌표를 몇 번째로 탐색하는지
    static int result = 0;

    //데이터 탐색 횟수
    static int count = 0;

    static void Main(string[] args)
    {
        StreamReader reader = new StreamReader(new BufferedStream(Console.OpenStandardInput()));
        StreamWriter writer = new StreamWriter(new BufferedStream(Console.OpenStandardOutput()));

        string[] temp = reader.ReadLine().Split();

        //사각형의 길이 2^n, 행 위치 r, 열 위치 c
        int n = int.Parse(temp[0]);
        int r = int.Parse(temp[1]);
        int c = int.Parse(temp[2]);

        //초기 좌표 (0, 0), 목표 좌표 (r, c), 사각형 길이 2^n
        Dfs(0, 0, r, c, (int) Math.Pow(2, n));

        //재귀 탐색을 통해 얻어낸 목표 좌표가 몇 번째로 탐색되었는지 출력
        writer.Write(result);

        reader.Close();
        writer.Close();

    }

    //현재 좌표 (curX, curY), 목표 좌표 (r, c), 사각형 길이 n
    static void Dfs(int curX, int curY, int r, int c, int n)
    {
        //목표 좌표에 도달했다면 지금까지 탐색한 횟수를 결과에 저장
        if (curX == c && curY == r)
        {
            result = count;
        } else
        {
            //1*1 사각형이 될 때까지 사각형 4등분
            if(n >= 2)
            {
                //현재 사각형을 4등분 했을 때 첫 번째 사각형에 포함되는 경우
                if (r < curY + n / 2 && c < curX + n / 2)
                {
                    //첫 번째 사각형을 다시 4등분
                    Dfs(curX, curY, r, c, n / 2);
                }
                else if (r < curY + n / 2 && c >= curX + n / 2)
                {
                    //현재 사각형을 4등분 했을 때 두 번째 사각형에 포함되는 경우
                    //첫 번째 사각형의 크기만큼 탐색 횟수 증가
                    //두 번째 사각형을 다시 4등분
                    count += n * n / 4;
                    Dfs(curX + n / 2, curY, r, c, n / 2);
                }
                else if (r >= curY + n / 2 && c < curX + n / 2)
                {
                    //현재 사각형을 4등분 했을 때 세 번째 사각형에 포함되는 경우
                    //1,2 번째 사각형의 크기만큼 탐색 횟수 증가
                    //세 번째 사각형을 다시 4등분
                    count += n * n / 4 * 2;
                    Dfs(curX, curY + n / 2, r, c, n / 2);
                }
                else
                {
                    //현재 사각형을 4등분 했을 때 네 번째 사각형에 포함되는 경우
                    //1~3 번째 사각형의 크기만큼 탐색 횟수 증가
                    //네 번째 사각형을 다시 4등분
                    count += n * n / 4 * 3;
                    Dfs(curX + n / 2, curY + n / 2, r, c, n / 2);
                }
            }
        }
    }
}
