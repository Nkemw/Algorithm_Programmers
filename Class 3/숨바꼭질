using System;
using System.Collections.Generic;
using System.Text;

class Program
{
    static void Main(string[] args)
    {
        StreamReader reader = new StreamReader(new BufferedStream(Console.OpenStandardInput()));
        StreamWriter writer = new StreamWriter(new BufferedStream(Console.OpenStandardOutput()));

        string[] temp = reader.ReadLine().Split();

        //현재 위치 n, 목표 위치 k
        int n = int.Parse(temp[0]);
        int k = int.Parse(temp[1]);

        //<현재 위치, 소요 시간>
        Queue<Tuple<int, int>> queue = new Queue<Tuple<int, int>>();

        //초기값으로 현재 위치와 0초로 시작
        queue.Enqueue(new Tuple<int, int>(n, 0));

        //위치를 0부터 n 또는 k의 최댓값만큼 제한
        int maxValue = Math.Max(n, k) * 2;
        bool[] visited = new bool[maxValue + 1];

        
        while(queue.Count > 0)
        {
            Tuple<int, int> curInfo = queue.Dequeue();

            //현재 위치가 k라면 최소 시간을 출력 후 탐색 종료
            if(curInfo.Item1 == k)
            {
                writer.Write(curInfo.Item2);
                break;
            }

            //1만큼 후퇴했을 때 범위에 속하면서 탐색하지 않은 위치라면 추가
            if(curInfo.Item1 - 1 >= 0 && !visited[curInfo.Item1 - 1])
            {
                visited[curInfo.Item1 - 1] = true;
                queue.Enqueue(new Tuple<int, int>(curInfo.Item1 - 1, curInfo.Item2 + 1));
            }

            //1만큼 전진했을 때 범위에 속하면서 탐색하지 않은 위치라면 추가
            if(curInfo.Item1 + 1 <= maxValue && !visited[curInfo.Item1 + 1])
            {
                visited[curInfo.Item1 + 1] = true;
                queue.Enqueue(new Tuple<int, int>(curInfo.Item1 + 1, curInfo.Item2 + 1));
            }

            //현재 위치에 2배만큼 전진했을 때 범위에 속하면서 탐색하지 않은 위치라면 추가
            if (curInfo.Item1 * 2 <= maxValue && !visited[curInfo.Item1 * 2])
            {
                visited[curInfo.Item1 * 2] = true;
                queue.Enqueue(new Tuple<int, int>(curInfo.Item1 * 2, curInfo.Item2 + 1));
            }


        }


        reader.Close();
        writer.Close();

    }
}
