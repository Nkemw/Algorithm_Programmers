using System;
using System.Collections.Generic;

class Program
{
    //각 노드의 탐색 여부
    static bool[] visited;

    //그래프
    static bool[,] map;

    //1번 컴퓨터로부터 감염된 컴퓨터의 수
    static int injectCount = 0;

    static void Main(string[] args)
    {
        StreamReader reader = new StreamReader(new BufferedStream(Console.OpenStandardInput()));
        StreamWriter writer = new StreamWriter(new BufferedStream(Console.OpenStandardOutput()));

        //노드의 개수
        int n = int.Parse(reader.ReadLine());
 
        //간선의 개수
        int edgeCount = int.Parse(reader.ReadLine());

        //편의를 위해 n+1 * n+1 만큼 그래프 크기와 bool 배열 크기 할당
        map = new bool[n+1, n+1];
        visited = new bool[n+1];

        //초기값 설정, 1번 노드에서 시작하므로 1번 노드 탐색 표기
        visited[1] = true;

        //입력된 간선에 대해 그래프 갱신
        for (int i = 0; i < edgeCount; i++) {
            string[] temp = reader.ReadLine().Split();

            int startNode = int.Parse(temp[0]);
            int endNode = int.Parse(temp[1]);

            map[startNode, endNode] = true;
            map[endNode, startNode] = true;
        }

        //1번 노드를 시작으로 깊이 우선 탐색 
        Dfs(map, 1);

        //감염된 컴퓨터 수 출력
        writer.Write(injectCount);

        reader.Close();
        writer.Close();

    }

    //깊이 우선 탐색
    static void Dfs(bool[,] map, int curNode)
    {
        //모든 노드에 대해 탐색 여부 검사
        for(int i = 1; i < map.GetLength(0); i++)
        {
            //간선으로 이어져 있으며 탐색하지 않는 노드를 탐색
            if (map[curNode, i] && !visited[i])
            {
                //재탐색 방지를 위해 탐색할 노드 표기
                visited[i] = true;

                //감염된 컴퓨터 수 증가
                injectCount++;

                //다음 노드를 현재 노드로 설정하여 깊이 우선 탐색 진행
                Dfs(map, i);
            }
        }
    }
}
