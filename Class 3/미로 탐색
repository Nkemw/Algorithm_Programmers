using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        StreamReader reader = new StreamReader(new BufferedStream(Console.OpenStandardInput()));
        StreamWriter writer = new StreamWriter(new BufferedStream(Console.OpenStandardOutput()));

        string[] temp = reader.ReadLine().Split();

        //n*m 크기의 미로
        int n = int.Parse(temp[0]);
        int m = int.Parse(temp[1]);

        //길 또는 벽을 나타내는 2차원 배열
        bool[,] map = new bool[n, m];

        //상하좌우 이동
        int[,] move = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

        //미로 정보 입력
        for(int i = 0; i < n; i++)
        {
            string lineInfo = reader.ReadLine();

            for(int j = 0; j < lineInfo.Length; j++)
            {
                if (lineInfo[j] == '1')
                {
                    map[i, j] = true;
                }
            }
        }

        //<y, x, 지나온 거리>
        Queue<Tuple<int, int, int>> queue = new Queue<Tuple<int, int, int>>();

        //(0, 0)을 시작으로 BFS 시작
        queue.Enqueue(new Tuple<int, int, int>(0, 0, 1));

        //재탐색하지 않도록 (0, 0)을 벽으로 간주
        map[0, 0] = false;

        while(queue.Count > 0)
        {
            //현재 위치에 대한 정보
            Tuple<int, int, int> curInfo = queue.Dequeue();

            //목적지에 도달한 경우, 최소 경로 길이를 출력하고 탐색 종료
            if(curInfo.Item1 == n-1 && curInfo.Item2 == m - 1)
            {
                writer.Write(curInfo.Item3);
                break;
            }

            //상하좌우 이동
            for(int i = 0; i < 4; i++)
            {
                //1. 미로의 범위를 벗어나지 않는 경우
                if ( (curInfo.Item1 + move[i, 0] >= 0 && curInfo.Item1 + move[i, 0] < n) &&
                    (curInfo.Item2 + move[i, 1] >= 0 && curInfo.Item2 + move[i, 1] < m))
                {
                    //2. 지나온 길이거나 벽이 아닌 경우 탐색
                    if (map[curInfo.Item1 + move[i, 0], curInfo.Item2 + move[i, 1]])
                    {
                        //다음 위치로 이동하고 경로 길이를 증가시킨 뒤 지나온 위치를 벽으로 간주
                        queue.Enqueue(new Tuple<int, int, int>(curInfo.Item1 + move[i, 0], curInfo.Item2 + move[i, 1], curInfo.Item3 + 1));
                        map[curInfo.Item1 + move[i, 0], curInfo.Item2 + move[i, 1]] = false;
                    }
                }

            }
        }

        reader.Close();
        writer.Close();

    }
}
