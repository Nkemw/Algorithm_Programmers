using System;
using System.Collections.Generic;
using System.Text;

class Program
{
    //탐색한 노드
    static HashSet<int> visited = new HashSet<int>();

    //탐색 순서 저장을 위해 사용
    static StringBuilder sb = new StringBuilder();

    static void Main(string[] args)
    {
        StreamReader reader = new StreamReader(new BufferedStream(Console.OpenStandardInput()));
        StreamWriter writer = new StreamWriter(new BufferedStream(Console.OpenStandardOutput()));

        string[] temp = reader.ReadLine().Split();

        //정점의 개수, 간선의 개수, 시작 노드(정점)
        int n = int.Parse(temp[0]);
        int m = int.Parse(temp[1]);
        int startNode = int.Parse(temp[2]);

        //편의를 위해 n+1 크기로 2차원 배열 선언
        //간선으로 이어져 있는 경우 true
        bool[,] map = new bool[n + 1, n + 1];

        //그래프 초기화
        for(int i = 0; i < m; i++)
        {
            temp = reader.ReadLine().Split();

            int firstNode = int.Parse(temp[0]);
            int secondNode = int.Parse(temp[1]);

            map[firstNode, secondNode] = true;
            map[secondNode, firstNode] = true;
        }


        //시작 노드를 탐색한 뒤 DFS 적용
        visited.Add(startNode);
       
        //StringBuilder에 시작 노드 기록
        sb.Append(startNode.ToString() + " ");

        //그래프, 노드의 개수, 시작 노드를 입력하여 DFS 실행
        Dfs(map, n, startNode);


        //bfs 탐색을 위해 HashSet 초기화
        visited = new HashSet<int>();

        //시작 노드를 탐색한 뒤 BFS 적용
        visited.Add(startNode);

        //bfs 탐색 순서와 구분하기 위해 줄바꿈 후 시작 노드 기록
        sb.Append("\n" + startNode.ToString() + " ");

        //그래프, 노드의 개수, 시작 노드를 입력하여 BFS 실행
        Bfs(map, n, startNode);

        //DFS 및 BFS 탐색 결과 출력
        writer.Write(sb.ToString());

        reader.Close();
        writer.Close();

    }

    //깊이 우선 탐색
    static void Dfs(bool[,] map, int nodeCount, int startNode)
    {
        //모든 정점을 탐색하지 않은 경우
        if(visited.Count < nodeCount)
        {
            //반복문을 이용해 번호가 낮은 정점부터 탐색
            for(int i = 1; i < nodeCount+1; i++)
            {
                //현재 정점과 간선으로 이어져 있고 탐색하지 않은 경우
                if (map[startNode, i] && !visited.Contains(i))
                {
                    //다음 정점을 StringBuilder에 기록 및 탐색한 정점 갱신
                    sb.Append(i + " ");
                    visited.Add(i);

                    //모든 정점을 탐색했다면 종료
                    if(visited.Count == nodeCount)
                    {
                        return;
                    }

                    //갱신된 정점을 시작 정점으로 재귀 탐색
                    Dfs(map, nodeCount, i);
                }
            }
        }
    }

    //너비 우선 탐색
    static void Bfs(bool[,] map, int nodeCount, int startNode)
    {
        Queue<int> queue = new Queue<int>();

        //초기값으로 시작 정점 저장
        queue.Enqueue(startNode);

        //탐색이 끝날 때까지 반복
        while(queue.Count > 0)
        {
            //현재 정점 번호
            int curNode = queue.Dequeue();

            //반복문을 이용해 번호가 낮은 정점부터 탐색
            for(int i = 1; i < nodeCount+1; i++)
            {
                //현재 정점과 간선으로 이어져 있고 탐색하지 않은 경우
                if (map[curNode, i] && !visited.Contains(i))
                {
                    //다음 정점을 StringBuilder에 기록 및 탐색한 정점 갱신
                    sb.Append(i + " ");
                    visited.Add(i);

                    //다음 정점 번호를 큐에 저장
                    queue.Enqueue(i);

                    //모든 정점을 탐색했다면 종료
                    if (visited.Count == nodeCount)
                    {
                        return;
                    }
                }
            }
        }
    }
}
