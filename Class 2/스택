using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Runtime.InteropServices;
using System.Text;

class Program
{
    static void Main(string[] args)
    {
        StreamReader reader = new StreamReader(new BufferedStream(Console.OpenStandardInput()));
        StreamWriter writer = new StreamWriter(new BufferedStream(Console.OpenStandardOutput()));

        //스택 자료구조 선언
        Stack<int> stack = new Stack<int>();

        //앞으로 입력받을 명령어 개수
        int n = int.Parse(reader.ReadLine());

        //명령어 개수만큼 반복
        for(int i = 0; i < n; i++)
        {
            //명령어 입력
            string[] command = reader.ReadLine().Split(' ');

            //명령어 종류에 따른 연산 진행
            if (command[0].Equals("push"))
            {
                //push라면 split으로 분리된 정수를 스택에 저장
                stack.Push(int.Parse(command[1]));

            } else if (command[0].Equals("pop"))
            {
                //pop이라면 스택의 크기를 검사한 뒤 자료가 있다면 맨 위의 정수를
                //자료가 없다면 -1 출력
                if (stack.Count > 0)
                {
                    writer.WriteLine(stack.Pop());
                } else
                {
                    writer.WriteLine(-1);
                }

            } else if (command[0].Equals("size"))
            {
                //size라면 스택의 크기를 출력
                writer.WriteLine(stack.Count);

            } else if (command[0].Equals("empty"))
            {
                //empty라면 스택의 크기를 검사하여 자료가 있다면 0, 없으면 1 출력
                if(stack.Count > 0)
                {
                    writer.WriteLine(0);
                } else
                {
                    writer.WriteLine(1);
                }

            } else if (command[0].Equals("top"))
            {
                //top이라면 스택의 크기를 검사한 뒤 자료가 있다면 맨 위의 정수를
                //자료가 없다면 -1 출력
                if (stack.Count > 0)
                {
                    writer.WriteLine(stack.Peek());
                }
                else
                {
                    writer.WriteLine(-1);
                }
            }
        }

        reader.Close();
        writer.Close();
    }
}
