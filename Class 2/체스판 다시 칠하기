using System;

class Program
{
    static void Main(string[] args)
    {
        //첫 번째 줄로 보드판의 행, 열 크기를 입력 받는다
        string[] size = Console.ReadLine().Split();

        //이후 행, 열 값을 변수로 저장
        int row = int.Parse(size[0]);
        int col = int.Parse(size[1]);

        //이후 보드판의 상태를 기록하기 위한 문자열 배열 선언
        string[] board = new string[row];

        //보드판의 상태 기록
        for (int i = 0; i < row; i++)
        {
            board[i] = Console.ReadLine();
        }

        //새롭게 칠해야 할 정사각형의 최소 개수를 저장하는 변수
        int minChange = Int32.MaxValue;
   
        //5중 반복문 사용, 첫 2중 반복문은 8*8 소형 보드판이 시작하는 위치
        for(int r = 0; r + 7 < row; r++)
        {
            for(int c = 0; c + 7 < col; c++)
            {
                //소형 보드판의 첫 번째 정사각형의 상태
                for(int i = 0; i < 2; i++)
                {
                    //소형 보드판을 선형 탐색하여 패턴에 맞지 않는 정사각형의 개수를 저장
                    int tempBoardChange = 0;
                    for(int j = r; j < r + 8; j++)
                    {
                        for(int k = c; k < c + 8; k++)
                        {
                            //첫 번째 정사각형의 상태가 'B'인 경우
                            if(i == 0)
                            {
                                if((j + k) % 2 == 0)
                                {
                                    if (board[j][k] == 'W')
                                    {
                                        tempBoardChange++;
                                    }
                                } else
                                {
                                    if (board[j][k] == 'B')
                                    {
                                        tempBoardChange++;
                                    }
                                }
                            } else //첫 번째 정사각형의 상태가 'W'인 경우
                            {
                                if ((j + k) % 2 == 0)
                                {
                                    if (board[j][k] == 'B')
                                    {
                                        tempBoardChange++;
                                    }
                                }
                                else
                                {
                                    if (board[j][k] == 'W')
                                    {
                                        tempBoardChange++;
                                    }
                                }
                            }
                        }
                    }

                    //64개의 정사각형을 탐색한 후 새롭게 칠할 최소 정사각형의 개수를 갱신
                    if(minChange > tempBoardChange)
                    {
                        minChange = tempBoardChange;
                    }
                }
            }
        }

        //중첩 반복문 종료 이후 새롭게 칠할 최소 정사각형의 개수를 출력
        Console.WriteLine(minChange);
    }
}
