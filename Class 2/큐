using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Runtime.InteropServices;
using System.Text;

class Program
{
    static void Main(string[] args)
    {
        StreamReader reader = new StreamReader(new BufferedStream(Console.OpenStandardInput()));
        StreamWriter writer = new StreamWriter(new BufferedStream(Console.OpenStandardOutput()));

        //큐 명령어를 적용 시킬 리스트 자료구조
        List<int> queueList = new List<int>();

        //입력받을 명령어 개수
        int n = int.Parse(reader.ReadLine());

        //명령어 개수만큼 반복
        for(int i = 0; i < n; i++)
        {
            //명령어 입력
            string[] command = reader.ReadLine().Split(' ');

            //명령어 종류에 따른 연산 진행
            if (command[0].Equals("push"))
            {
                //push라면 Add 메소드를 통해 자료 추가
                queueList.Add(int.Parse(command[1]));

            } else if (command[0].Equals("pop"))
            {
                //pop이라면 Count 속성 검사 후 1 이상이면 첫 번째 자료 출력 및 제거
                //0이면 -1 출력
                if (queueList.Count > 0)
                {
                    writer.WriteLine(queueList[0]);
                    queueList.RemoveAt(0);
                } else
                {
                    writer.WriteLine(-1);
                }

            } else if (command[0].Equals("size"))
            {
                //size라면 Count 속성 출력
                writer.WriteLine(queueList.Count);

            } else if (command[0].Equals("empty"))
            {
                //empty라면 Count가 0이라면 1, 1 이상이라면 0 출력
                if(queueList.Count > 0)
                {
                    writer.WriteLine(0);
                } else
                {
                    writer.WriteLine(1);
                }

            } else if (command[0].Equals("front"))
            {
                //front라면 Count 속성을 검사하고 0이라면 -1, 1 이상이면 첫 번째 자료 출력
                if (queueList.Count > 0)
                {
                    writer.WriteLine(queueList[0]);
                }
                else
                {
                    writer.WriteLine(-1);
                }

            } else if (command[0].Equals("back"))
            {
                //back이라면 Count 속성을 검사하고 0이라면 -1, 1 이상이면 마지막 자료 출력
                if (queueList.Count > 0)
                {
                    writer.WriteLine(queueList[queueList.Count-1]);
                }
                else
                {
                    writer.WriteLine(-1);
                }
            }
        }

        reader.Close();
        writer.Close();
    }
}
