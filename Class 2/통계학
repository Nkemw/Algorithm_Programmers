using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Runtime.InteropServices;
using System.Text;

class Program
{
    static void Main(string[] args)
    {
        StreamReader reader = new StreamReader(new BufferedStream(Console.OpenStandardInput()));
        StreamWriter writer = new StreamWriter(new BufferedStream(Console.OpenStandardOutput()));

        //입력받을 수의 개수
        int numCount = int.Parse(reader.ReadLine());

        //<입력 정수, 빈도수>를 저장
        Dictionary<int, int> numDict = new Dictionary<int, int>();

        //입력된 수를 모두 저장
        List<int> numList = new List<int>();

        for(int i = 0; i < numCount; i++)
        {
            int temp = int.Parse(reader.ReadLine());

            //모든 수를 리스트에 저장
            numList.Add(temp);

            //Dictionary에 존재하지 않으면 새로운 key-value 생성
            //존재한다면 value 1 증가
            if (numDict.ContainsKey(temp))
            {
                numDict[temp] += 1;
            } else
            {
                numDict.Add(temp, 1);
            }
        }

        //리스트 오름차순 정렬
        numList.Sort();

        //평균, 중앙값, 최빈값, 범위
        int avg = 0;
        int midValue = numList[numCount/2];
        int highFrequencyValue = 0;
        int range = numList[numCount-1] - numList[0];

        //평균을 구하기 위해 먼저 수들의 합 저장
        for(int i = 0; i < numCount; i++)
        {
            avg += numList[i];
        }

        //Round 함수를 이용하여 반올림, 반올림할 값은 double형으로 캐스팅
        avg = (int) Math.Round((double) avg / numCount, 0);

        //가장 많은 빈도 수를 구하기
        int highFrequency = 0;

        //Dictionary를 탐색하여 최대 빈도 수 저장
        foreach(int i in numDict.Keys)
        {
            highFrequency = Math.Max(highFrequency, numDict[i]);
        }

        //최빈값을 저장하기 위한 리스트
        List<int> highFrequencyList = new List<int>();

        //Dictionary를 재탐색하여 최빈값에 해당하는 값을 리스트에 저장
        foreach (int i in numDict.Keys)
        {
            if (numDict[i] == highFrequency)
            {
                highFrequencyList.Add(i);
            }
        }

        //최빈값 리스트 오름차순 정렬
        highFrequencyList.Sort();

        //리스트의 크기가 2이상인 경우 두 번째로 작은 값을 저장하도록 처리
        if (highFrequencyList.Count == 1)
        {
            highFrequencyValue = highFrequencyList[0];
        }
        else
        {
            highFrequencyValue = highFrequencyList[1];
        }


        //결과 출력
        writer.WriteLine(avg);
        writer.WriteLine(midValue);
        writer.WriteLine(highFrequencyValue);
        writer.WriteLine(range);


        reader.Close();
        writer.Close();

    }

}
