using System;
using System.Collections.Generic;

public class Solution {
    
    //각 부대에서 이동할 수 있는 부대 리스트를 저장 <현재 부대, 이동 가능한 부대 리스트>
    Dictionary<int, List<int>> map = new Dictionary<int, List<int>>();

    //목적 부대로부터 각 부대까지의 거리를 저장
    int[] dist;

    public int[] solution(int n, int[,] roads, int[] sources, int destination) {
        int[] answer = new int[sources.Length];
        dist = new int[n];
 
        //각 부대까지의 거리를 -1로 초기화       
        for(int i = 0; i < dist.Length; i++){
            dist[i] = -1;
        }
        
        //roads 배열 매핑
        for(int i = 0; i < roads.GetLength(0); i++){
            if(!map.ContainsKey(roads[i, 0])){
                map.Add(roads[i, 0], new List<int>());
            }
            if(!map.ContainsKey(roads[i, 1])){
                map.Add(roads[i, 1], new List<int>());
            }
            map[roads[i, 0]].Add(roads[i, 1]);
            map[roads[i, 1]].Add(roads[i, 0]);
        }
        
        //목적 노드를 시작 노드로 설정한 뒤 BFS 실행
        Bfs(destination);
        
        //BFS를 통해 구해진 거리를 이용하여 각 노드의 최단거리를 저장
        for(int i = 0; i < sources.Length; i++){
            answer[i] = dist[sources[i]-1];
        }
        return answer;
    }
    
    void Bfs(int startNode){
        //<현재 부대, 거리>
        Queue<Tuple<int, int>> queue = new Queue<Tuple<int, int>>();
        
        //방문 부대
        HashSet<int> visitedNode = new HashSet<int>();
       
        //초기값 설정
        queue.Enqueue(new Tuple<int, int>(startNode, 0));
        visitedNode.Add(startNode);
        dist[startNode-1] = 0;
        
        while(queue.Count > 0){
            
            Tuple<int, int> curInfo = queue.Dequeue();
            
            //현재 부대에서 이동 가능한 부대의 수만큼 반복
            for(int i = 0; i < map[curInfo.Item1].Count; i++){
                
                //방문하지 않은 부대인 경우
                if(!visitedNode.Contains(map[curInfo.Item1][i])){

                    //큐, Hashset, dist 배열 갱신
                    queue.Enqueue(new Tuple<int, int>(map[curInfo.Item1][i], curInfo.Item2+1));
                    visitedNode.Add(map[curInfo.Item1][i]);
                    dist[map[curInfo.Item1][i]-1] = curInfo.Item2+1;
                }
            }
        }
    }
    
}
