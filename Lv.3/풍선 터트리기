using System;

public class Solution {
    public int solution(int[] a) {

        //배열의 시작 위치, 마지막 위치는 항상 최후로 남는 원소가 될 수 있으므로 미리 2개 추가
        int answer = 2;
        
        //각 부분 수열에 대한 최솟값 초기화
        int rightMin = a[a.Length-1];
        int leftMin = a[0];

        //배열의 최솟값에 대한 정보, <최솟값, 위치>
        Tuple<int, int> minInfo = new Tuple<int, int>(a[0], 0);
        
        //먼저 선형 탐색을 통해 최솟값 정보 저장
        for(int i = 1; i < a.Length; i++){
            if(minInfo.Item1 > a[i]){
                minInfo = new Tuple<int, int>(a[i], i);
            }
        }
        
        //왼쪽 부분 수열 처리
        //왼쪽부터 시작하여 이전 최솟값보다 현재 값이 더 작다면 최후로 남는 원소로 간주
        //그리고 최솟값 갱신
        for(int i = 1; i < minInfo.Item2; i++){
            if(a[i] < leftMin){
                leftMin = a[i];
                answer++;
            }
        }
        
        //오른쪽 부분 수열 처리
        //오른쪽부터 시작하여 이전 최솟값보다 현재 값이 더 작다면 최후로 남는 원소로 간주
        //그리고 최솟값 갱신
        for(int i = a.Length-2; i > minInfo.Item2; i--){
            if(a[i] < rightMin){
                rightMin = a[i];
                answer++;
            }
        }
        
        //배열의 최솟값이 시작 지점이나 마지막 지점에 위치하지 않은 경우라면
        //시작 지점, 최솟값 지점, 마지막 지점은 항상 최후로 존재하므로 1을 더 추가한다
        if(minInfo.Item2 != 0 && minInfo.Item2 != a.Length-1){
            answer++;
        }
        
        //배열의 길이가 1이라면 1 반환 (이 문제에서는 없어도 통과한다)
        if(a.Length == 1){
            return 1;
        }
        
        return answer;
    }
}
