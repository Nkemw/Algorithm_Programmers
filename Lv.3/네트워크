using System;
using System.Collections.Generic;
public class Solution {
    int answer = 0;

    //탐색한 정점을 저장
    HashSet<int> visitedNode = new HashSet<int>();
    
    public int solution(int n, int[,] computers) {

        //첫 번째 정점부터 마지막 정점까지 모두 시작 정점으로 설정하여 탐색
        for(int i = 0; i < n; i++){
            Dfs(computers, 0, i);
        }
        return answer;
    }
    
    public void Dfs(int[,] computers, int depth, int currentNode){

        //시작 정점이면서 탐색된 정점이라면 모두 중복되는 탐색이므로 제외한다.
        //탐색하지 않은 정점이라면 새로운 탐색이므로 하나의 집합으로 추가
        if(depth == 0){
            if(visitedNode.Contains(currentNode)){
                return;
            } else {
                answer++;
            }
        }

        for(int i = 0; i < computers.GetLength(1); i++){
            //i번째 정점을 탐색하지 않고 현재 정점에서 i번째 정점으로 이어진 간선이 존재하는 경우
            //해당 정점 탐색
            if(!visitedNode.Contains(i) && computers[currentNode, i] == 1){
                visitedNode.Add(i);
                Dfs(computers, depth+1, i);
            }
        }
    }
}
